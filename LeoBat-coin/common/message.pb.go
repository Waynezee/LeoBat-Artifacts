// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: message.proto

package common

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Message_MsgType int32

const (
	Message_PAYLOAD     Message_MsgType = 0
	Message_VAL         Message_MsgType = 1
	Message_BVAL        Message_MsgType = 2
	Message_PROM        Message_MsgType = 3
	Message_COIN        Message_MsgType = 4
	Message_PAYLOADREQ  Message_MsgType = 5
	Message_PAYLOADRESP Message_MsgType = 6
)

var Message_MsgType_name = map[int32]string{
	0: "PAYLOAD",
	1: "VAL",
	2: "BVAL",
	3: "PROM",
	4: "COIN",
	5: "PAYLOADREQ",
	6: "PAYLOADRESP",
}

var Message_MsgType_value = map[string]int32{
	"PAYLOAD":     0,
	"VAL":         1,
	"BVAL":        2,
	"PROM":        3,
	"COIN":        4,
	"PAYLOADREQ":  5,
	"PAYLOADRESP": 6,
}

func (x Message_MsgType) String() string {
	return proto.EnumName(Message_MsgType_name, int32(x))
}

func (Message_MsgType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0, 0}
}

type Message struct {
	From            uint32          `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	Round           uint32          `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Sender          uint32          `protobuf:"varint,3,opt,name=sender,proto3" json:"sender,omitempty"`
	Type            Message_MsgType `protobuf:"varint,4,opt,name=type,proto3,enum=common.Message_MsgType" json:"type,omitempty"`
	Hash            string          `protobuf:"bytes,5,opt,name=hash,proto3" json:"hash,omitempty"`
	Signature       []byte          `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	Payload         []byte          `protobuf:"bytes,7,opt,name=payload,proto3" json:"payload,omitempty"`
	TotalPayloadNum uint32          `protobuf:"varint,8,opt,name=totalPayloadNum,proto3" json:"totalPayloadNum,omitempty"`
	PayloadSlice    uint32          `protobuf:"varint,9,opt,name=payloadSlice,proto3" json:"payloadSlice,omitempty"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetFrom() uint32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *Message) GetRound() uint32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *Message) GetSender() uint32 {
	if m != nil {
		return m.Sender
	}
	return 0
}

func (m *Message) GetType() Message_MsgType {
	if m != nil {
		return m.Type
	}
	return Message_PAYLOAD
}

func (m *Message) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Message) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Message) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Message) GetTotalPayloadNum() uint32 {
	if m != nil {
		return m.TotalPayloadNum
	}
	return 0
}

func (m *Message) GetPayloadSlice() uint32 {
	if m != nil {
		return m.PayloadSlice
	}
	return 0
}

type Signature struct {
	Sig []byte `protobuf:"bytes,1,opt,name=sig,proto3" json:"sig,omitempty"`
	Id  uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Signature) Reset()         { *m = Signature{} }
func (m *Signature) String() string { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()    {}
func (*Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{1}
}
func (m *Signature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Signature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature.Merge(m, src)
}
func (m *Signature) XXX_Size() int {
	return m.Size()
}
func (m *Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature.DiscardUnknown(m)
}

var xxx_messageInfo_Signature proto.InternalMessageInfo

func (m *Signature) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *Signature) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QC struct {
	Hash   string       `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Sigs   []*Signature `protobuf:"bytes,2,rep,name=sigs,proto3" json:"sigs,omitempty"`
	Sender uint32       `protobuf:"varint,3,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *QC) Reset()         { *m = QC{} }
func (m *QC) String() string { return proto.CompactTextString(m) }
func (*QC) ProtoMessage()    {}
func (*QC) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{2}
}
func (m *QC) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QC.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QC.Merge(m, src)
}
func (m *QC) XXX_Size() int {
	return m.Size()
}
func (m *QC) XXX_DiscardUnknown() {
	xxx_messageInfo_QC.DiscardUnknown(m)
}

var xxx_messageInfo_QC proto.InternalMessageInfo

func (m *QC) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *QC) GetSigs() []*Signature {
	if m != nil {
		return m.Sigs
	}
	return nil
}

func (m *QC) GetSender() uint32 {
	if m != nil {
		return m.Sender
	}
	return 0
}

type ClientReq struct {
	StartId int32  `protobuf:"varint,1,opt,name=startId,proto3" json:"startId,omitempty"`
	ReqNum  int32  `protobuf:"varint,2,opt,name=reqNum,proto3" json:"reqNum,omitempty"`
	Payload []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *ClientReq) Reset()         { *m = ClientReq{} }
func (m *ClientReq) String() string { return proto.CompactTextString(m) }
func (*ClientReq) ProtoMessage()    {}
func (*ClientReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{3}
}
func (m *ClientReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientReq.Merge(m, src)
}
func (m *ClientReq) XXX_Size() int {
	return m.Size()
}
func (m *ClientReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientReq.DiscardUnknown(m)
}

var xxx_messageInfo_ClientReq proto.InternalMessageInfo

func (m *ClientReq) GetStartId() int32 {
	if m != nil {
		return m.StartId
	}
	return 0
}

func (m *ClientReq) GetReqNum() int32 {
	if m != nil {
		return m.ReqNum
	}
	return 0
}

func (m *ClientReq) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type ClientResp struct {
}

func (m *ClientResp) Reset()         { *m = ClientResp{} }
func (m *ClientResp) String() string { return proto.CompactTextString(m) }
func (*ClientResp) ProtoMessage()    {}
func (*ClientResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{4}
}
func (m *ClientResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientResp.Merge(m, src)
}
func (m *ClientResp) XXX_Size() int {
	return m.Size()
}
func (m *ClientResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientResp.DiscardUnknown(m)
}

var xxx_messageInfo_ClientResp proto.InternalMessageInfo

type Batch struct {
	Reqs []*ClientReq `protobuf:"bytes,1,rep,name=reqs,proto3" json:"reqs,omitempty"`
}

func (m *Batch) Reset()         { *m = Batch{} }
func (m *Batch) String() string { return proto.CompactTextString(m) }
func (*Batch) ProtoMessage()    {}
func (*Batch) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{5}
}
func (m *Batch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Batch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Batch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Batch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Batch.Merge(m, src)
}
func (m *Batch) XXX_Size() int {
	return m.Size()
}
func (m *Batch) XXX_DiscardUnknown() {
	xxx_messageInfo_Batch.DiscardUnknown(m)
}

var xxx_messageInfo_Batch proto.InternalMessageInfo

func (m *Batch) GetReqs() []*ClientReq {
	if m != nil {
		return m.Reqs
	}
	return nil
}

type ValQC struct {
	StrongConnections []byte `protobuf:"bytes,1,opt,name=strongConnections,proto3" json:"strongConnections,omitempty"`
	WeakConnections   []byte `protobuf:"bytes,2,opt,name=weakConnections,proto3" json:"weakConnections,omitempty"`
	StrongQCs         []*QC  `protobuf:"bytes,3,rep,name=strongQCs,proto3" json:"strongQCs,omitempty"`
	WeakQCs           []*QC  `protobuf:"bytes,4,rep,name=weakQCs,proto3" json:"weakQCs,omitempty"`
}

func (m *ValQC) Reset()         { *m = ValQC{} }
func (m *ValQC) String() string { return proto.CompactTextString(m) }
func (*ValQC) ProtoMessage()    {}
func (*ValQC) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{6}
}
func (m *ValQC) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValQC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValQC.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValQC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValQC.Merge(m, src)
}
func (m *ValQC) XXX_Size() int {
	return m.Size()
}
func (m *ValQC) XXX_DiscardUnknown() {
	xxx_messageInfo_ValQC.DiscardUnknown(m)
}

var xxx_messageInfo_ValQC proto.InternalMessageInfo

func (m *ValQC) GetStrongConnections() []byte {
	if m != nil {
		return m.StrongConnections
	}
	return nil
}

func (m *ValQC) GetWeakConnections() []byte {
	if m != nil {
		return m.WeakConnections
	}
	return nil
}

func (m *ValQC) GetStrongQCs() []*QC {
	if m != nil {
		return m.StrongQCs
	}
	return nil
}

func (m *ValQC) GetWeakQCs() []*QC {
	if m != nil {
		return m.WeakQCs
	}
	return nil
}

func init() {
	proto.RegisterEnum("common.Message_MsgType", Message_MsgType_name, Message_MsgType_value)
	proto.RegisterType((*Message)(nil), "common.Message")
	proto.RegisterType((*Signature)(nil), "common.Signature")
	proto.RegisterType((*QC)(nil), "common.QC")
	proto.RegisterType((*ClientReq)(nil), "common.ClientReq")
	proto.RegisterType((*ClientResp)(nil), "common.ClientResp")
	proto.RegisterType((*Batch)(nil), "common.Batch")
	proto.RegisterType((*ValQC)(nil), "common.ValQC")
}

func init() { proto.RegisterFile("message.proto", fileDescriptor_33c57e4bae7b9afd) }

var fileDescriptor_33c57e4bae7b9afd = []byte{
	// 519 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0xcd, 0x6e, 0xda, 0x4c,
	0x14, 0x65, 0xfc, 0x83, 0xe3, 0x0b, 0x21, 0xce, 0xe8, 0xd3, 0xd7, 0x59, 0x54, 0x16, 0xb2, 0x5a,
	0xc9, 0x52, 0x5b, 0x16, 0xe9, 0x13, 0x80, 0xdb, 0x45, 0xa4, 0x10, 0x60, 0xa8, 0x12, 0x75, 0x53,
	0x69, 0x0a, 0x53, 0xc7, 0x2a, 0x78, 0xc0, 0x33, 0xa8, 0xe2, 0x2d, 0xfa, 0x26, 0x7d, 0x8d, 0x2e,
	0xb3, 0xec, 0xb2, 0x82, 0x37, 0xe8, 0x13, 0x54, 0x33, 0xd8, 0x04, 0x12, 0x75, 0x77, 0xcf, 0x3d,
	0xe7, 0xce, 0x3d, 0x9c, 0x8b, 0xe1, 0x74, 0xce, 0xa5, 0x64, 0x29, 0xef, 0x2c, 0x0a, 0xa1, 0x04,
	0xae, 0x4f, 0xc4, 0x7c, 0x2e, 0xf2, 0xe8, 0x8f, 0x05, 0x5e, 0x7f, 0xc7, 0x60, 0x0c, 0xce, 0x97,
	0x42, 0xcc, 0x09, 0x6a, 0xa3, 0xf8, 0x94, 0x9a, 0x1a, 0xff, 0x07, 0x6e, 0x21, 0x56, 0xf9, 0x94,
	0x58, 0xa6, 0xb9, 0x03, 0xf8, 0x7f, 0xa8, 0x4b, 0x9e, 0x4f, 0x79, 0x41, 0x6c, 0xd3, 0x2e, 0x11,
	0x7e, 0x05, 0x8e, 0x5a, 0x2f, 0x38, 0x71, 0xda, 0x28, 0x6e, 0x5d, 0x3c, 0xeb, 0xec, 0x96, 0x74,
	0xca, 0x05, 0x9d, 0xbe, 0x4c, 0x3f, 0xac, 0x17, 0x9c, 0x1a, 0x91, 0x5e, 0x77, 0xc7, 0xe4, 0x1d,
	0x71, 0xdb, 0x28, 0xf6, 0xa9, 0xa9, 0xf1, 0x73, 0xf0, 0x65, 0x96, 0xe6, 0x4c, 0xad, 0x0a, 0x4e,
	0xea, 0x6d, 0x14, 0x37, 0xe9, 0x43, 0x03, 0x13, 0xf0, 0x16, 0x6c, 0x3d, 0x13, 0x6c, 0x4a, 0x3c,
	0xc3, 0x55, 0x10, 0xc7, 0x70, 0xa6, 0x84, 0x62, 0xb3, 0xe1, 0x0e, 0x5f, 0xaf, 0xe6, 0xe4, 0xc4,
	0x38, 0x7b, 0xdc, 0xc6, 0x11, 0x34, 0xcb, 0xa1, 0xf1, 0x2c, 0x9b, 0x70, 0xe2, 0x1b, 0xd9, 0x51,
	0x2f, 0xfa, 0x04, 0x5e, 0x69, 0x15, 0x37, 0xc0, 0x1b, 0x76, 0x3f, 0x5e, 0x0d, 0xba, 0xef, 0x82,
	0x1a, 0xf6, 0xc0, 0xbe, 0xe9, 0x5e, 0x05, 0x08, 0x9f, 0x80, 0xd3, 0xd3, 0x95, 0xa5, 0xab, 0x21,
	0x1d, 0xf4, 0x03, 0x5b, 0x57, 0xc9, 0xe0, 0xf2, 0x3a, 0x70, 0x70, 0x0b, 0xa0, 0x9c, 0xa1, 0xef,
	0x47, 0x81, 0x8b, 0xcf, 0xa0, 0xb1, 0xc7, 0xe3, 0x61, 0x50, 0x8f, 0xde, 0x80, 0x3f, 0xde, 0xff,
	0xa8, 0x00, 0x6c, 0x99, 0xa5, 0x26, 0xf4, 0x26, 0xd5, 0x25, 0x6e, 0x81, 0x95, 0x55, 0x81, 0x5b,
	0xd9, 0x34, 0xba, 0x05, 0x6b, 0x94, 0xec, 0xe3, 0x42, 0x07, 0x71, 0xbd, 0x04, 0x47, 0x66, 0xa9,
	0x24, 0x56, 0xdb, 0x8e, 0x1b, 0x17, 0xe7, 0x55, 0xde, 0xfb, 0xc7, 0xa9, 0xa1, 0xff, 0x75, 0xae,
	0xe8, 0x16, 0xfc, 0x64, 0x96, 0xf1, 0x5c, 0x51, 0xbe, 0xd4, 0xe1, 0x4a, 0xc5, 0x0a, 0x75, 0x39,
	0x35, 0x2b, 0x5c, 0x5a, 0x41, 0x3d, 0x5e, 0xf0, 0xa5, 0xce, 0xd4, 0x32, 0x44, 0x89, 0x0e, 0xcf,
	0x61, 0x1f, 0x9d, 0x23, 0x6a, 0x02, 0x54, 0x0f, 0xcb, 0x45, 0xd4, 0x01, 0xb7, 0xc7, 0xd4, 0xc4,
	0xd8, 0x2d, 0xf8, 0x52, 0x12, 0x74, 0x6c, 0x77, 0xef, 0x81, 0x1a, 0x3a, 0xfa, 0x81, 0xc0, 0xbd,
	0x61, 0xb3, 0x51, 0x82, 0x5f, 0xc3, 0xb9, 0x54, 0x85, 0xc8, 0xd3, 0x44, 0xe4, 0x39, 0x9f, 0xa8,
	0x4c, 0xe4, 0xb2, 0x4c, 0xea, 0x29, 0xa1, 0xff, 0x04, 0xdf, 0x38, 0xfb, 0x7a, 0xa8, 0xb5, 0x8c,
	0xf6, 0x71, 0x1b, 0xc7, 0xe0, 0xef, 0xc6, 0x47, 0x89, 0x24, 0xb6, 0x71, 0x03, 0x95, 0x9b, 0x51,
	0x42, 0x1f, 0x48, 0xfc, 0x02, 0x3c, 0x3d, 0xac, 0x75, 0xce, 0x13, 0x5d, 0x45, 0xf5, 0xc8, 0xcf,
	0x4d, 0x88, 0xee, 0x37, 0x21, 0xfa, 0xbd, 0x09, 0xd1, 0xf7, 0x6d, 0x58, 0xbb, 0xdf, 0x86, 0xb5,
	0x5f, 0xdb, 0xb0, 0xf6, 0xb9, 0x6e, 0x3e, 0xb7, 0xb7, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xea,
	0x36, 0x6f, 0x20, 0x7f, 0x03, 0x00, 0x00,
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PayloadSlice != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.PayloadSlice))
		i--
		dAtA[i] = 0x48
	}
	if m.TotalPayloadNum != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TotalPayloadNum))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Type != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if m.Sender != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Sender))
		i--
		dAtA[i] = 0x18
	}
	if m.Round != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x10
	}
	if m.From != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Signature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Signature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Signature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sig) > 0 {
		i -= len(m.Sig)
		copy(dAtA[i:], m.Sig)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Sig)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QC) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QC) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QC) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sender != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Sender))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Sigs) > 0 {
		for iNdEx := len(m.Sigs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sigs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ReqNum != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ReqNum))
		i--
		dAtA[i] = 0x10
	}
	if m.StartId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClientResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Batch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Batch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Batch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reqs) > 0 {
		for iNdEx := len(m.Reqs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reqs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ValQC) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValQC) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValQC) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WeakQCs) > 0 {
		for iNdEx := len(m.WeakQCs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WeakQCs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.StrongQCs) > 0 {
		for iNdEx := len(m.StrongQCs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StrongQCs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.WeakConnections) > 0 {
		i -= len(m.WeakConnections)
		copy(dAtA[i:], m.WeakConnections)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.WeakConnections)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StrongConnections) > 0 {
		i -= len(m.StrongConnections)
		copy(dAtA[i:], m.StrongConnections)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.StrongConnections)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != 0 {
		n += 1 + sovMessage(uint64(m.From))
	}
	if m.Round != 0 {
		n += 1 + sovMessage(uint64(m.Round))
	}
	if m.Sender != 0 {
		n += 1 + sovMessage(uint64(m.Sender))
	}
	if m.Type != 0 {
		n += 1 + sovMessage(uint64(m.Type))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.TotalPayloadNum != 0 {
		n += 1 + sovMessage(uint64(m.TotalPayloadNum))
	}
	if m.PayloadSlice != 0 {
		n += 1 + sovMessage(uint64(m.PayloadSlice))
	}
	return n
}

func (m *Signature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovMessage(uint64(m.Id))
	}
	return n
}

func (m *QC) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.Sigs) > 0 {
		for _, e := range m.Sigs {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if m.Sender != 0 {
		n += 1 + sovMessage(uint64(m.Sender))
	}
	return n
}

func (m *ClientReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartId != 0 {
		n += 1 + sovMessage(uint64(m.StartId))
	}
	if m.ReqNum != 0 {
		n += 1 + sovMessage(uint64(m.ReqNum))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ClientResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Batch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Reqs) > 0 {
		for _, e := range m.Reqs {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	return n
}

func (m *ValQC) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StrongConnections)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.WeakConnections)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.StrongQCs) > 0 {
		for _, e := range m.StrongQCs {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if len(m.WeakQCs) > 0 {
		for _, e := range m.WeakQCs {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			m.Sender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sender |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Message_MsgType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPayloadNum", wireType)
			}
			m.TotalPayloadNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPayloadNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadSlice", wireType)
			}
			m.PayloadSlice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayloadSlice |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Signature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QC) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QC: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QC: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sigs = append(m.Sigs, &Signature{})
			if err := m.Sigs[len(m.Sigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			m.Sender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sender |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartId", wireType)
			}
			m.StartId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqNum", wireType)
			}
			m.ReqNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Batch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Batch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Batch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reqs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reqs = append(m.Reqs, &ClientReq{})
			if err := m.Reqs[len(m.Reqs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValQC) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValQC: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValQC: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrongConnections", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrongConnections = append(m.StrongConnections[:0], dAtA[iNdEx:postIndex]...)
			if m.StrongConnections == nil {
				m.StrongConnections = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeakConnections", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WeakConnections = append(m.WeakConnections[:0], dAtA[iNdEx:postIndex]...)
			if m.WeakConnections == nil {
				m.WeakConnections = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrongQCs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrongQCs = append(m.StrongQCs, &QC{})
			if err := m.StrongQCs[len(m.StrongQCs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeakQCs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WeakQCs = append(m.WeakQCs, &QC{})
			if err := m.WeakQCs[len(m.WeakQCs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
